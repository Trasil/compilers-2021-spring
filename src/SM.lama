-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    BINOP (bp):tl -> 
	  fun (y:x:s){
        eval ([ binop(bp, x,y):s, c[1], c[2]], tl)
      }(c[0])
  | CONST (n):tl -> 
      eval([ n:c[0], c[1], c[2]], tl)
  | READ:tl  ->  
      var n;
      n := readWorld (c[2]);
      eval ([n[0]:c[0], c[1], n[1]], tl)
  | WRITE:tl -> 
      fun (z:s){
        eval([s, c[1], writeWorld(z, c[2])], tl)
      }(c[0])
  | LD (x):tl -> 
     eval ([c[1](x):c[0], c[1], c[2]], tl)
  | ST (x):tl -> 
      fun (z:s){
        eval ([ s, c[1] <- [x, z], c[2]], tl)
      }(c[0])
  | 0 -> c
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  getBuffer (cmpSM (stmt))
}

fun cmpSM(stmt){
  case stmt of
    Assn  (s, expr) -> compileExpr(expr) <+ ST (s)
  | Read  (x)       -> listBuffer ( {READ, ST (x)} )
  | Write (expr)    -> compileExpr(expr) <+ WRITE
  | Seq   (s1, s2)  -> cmpSM(s1) <+> cmpSM(s2) 
  | Skip            -> emptyBuffer() 
  esac
}
